name: 'Cache Nix store'
description: 'Restore and save Nix store using GitHub Actions cache to speed up workflows.'
author: 'GitHub'
inputs:
  key:
    description: 'The primary key for restoring and saving a cache.'
    required: true
  
  restore-first-match-keys:
    description: |
      - When a newline-separated non-empty list of non-empty key prefixes, if no cache hit occurred for the primary `key`, searches for the first prefix for which there exists a cache with a matching key and restores that cache.
          - The output `cache-hit` returns `false` in this case.
          - Use `restore-first-match-hit` to change this behavior.
      - Otherwise, has no effect.
    default: ''
  restore-first-match-hit:
    description: |
      - When `true`, if a cache was restored via `restore-first-match-keys`, the output `cache-hit` returns `true`.
      - Otherwise, the output `cache-hit` returns `false`.
    default: 'false'

  restore-all-matches-keys:
    description: |
      - When a newline-separated non-empty list of non-empty key prefixes, tries to restore all caches whose keys match these prefixes.
      - Otherwise, has no effect.
    default: ''

  gc-max-store-size-macos:
    description: |
      - When a number (of bytes) and on a `macOS` runner, collects garbage until Nix store size (in bytes) is at most this number just before trying to save a new cache.
      - Otherwise, doesn't collect garbage.
    default: ''
  gc-max-store-size-linux:
    description: |
      - When a number (of bytes) and on a `Linux` runner, collects garbage until Nix store size (in bytes) is at most this number just before trying to save a new cache.
      - Otherwise, doesn't collect garbage.
    default: ''
  
  purge:
    description: |
      - When `true`, purges old caches.
      - Otherwise, doesn't purge them.
    default: 'false'
  purge-overwrite:
    description: |
      - When `always`, always purges old caches with the primary `key` before saving a new cache with the primary `key`.
      - When `never`, never purges an old cache with the primary `key` and never saves a new cache with the primary `key`.
      - Otherwise, saves a new cache with the primary `key` if after purging there's no old cache with the primary `key`.
    default: ''
  purge-keys:
    description: |
      - When a newline-separated non-empty list of non-empty cache key prefixes, collects for purging all cache keys that match these prefixes.
      - Otherwise, doesn't collect keys.
    default: ''
  purge-accessed-max-age:
    description: |
      - When a number, purges caches last accessed more than this number of seconds ago relative to the start of the cache saving phase.
      - Otherwise, has no effect on purging.
    default: ''
  purge-created-max-age:
    description: |
      - When a number, purges caches created more than this number of seconds ago relative to the start of the cache saving phase.
      - Otherwise, has no effect on purging.
    default: ''
  
  upload-chunk-size:
    description: 'When a number (of bytes), uses it as the chunk size to split up large files during upload, in bytes.'
    # The original default value may be provided here (https://github.com/actions/cache/issues/1292)
    # 32MB
    default: '33554432'

  fail-on-cache-miss:
    description: |
      - When `true`, fail the workflow if a cache entry is found neither via the primary `key` nor via the `restore-first-match-keys`.
      - Otherwise, has no effect on the action.
    default: 'false'

  lookup-only-on-key-hit:
    description: |
      - When `true`, if a cache with the `key` exists, skips restore and save phases.
        The output `cache-hit` returns `true`.
        The outputs `cache-primary-key`, `cache-matched-key` return resolved `key`.
      - Otherwise, runs restore and save phases.
    default: 'false'

  token:
    description: 'Used to communicate with GitHub API.'
    default: ${{ github.token }}
outputs:
  cache-hit:
    description: 'A boolean value that indicates whether a cache was restored successfully, either via the primary `key` or via the `restore-first-match-keys` if `restore-first-match-hit` was set.'
  cache-primary-key:
    description: 'The resolved primary `key`.'
  cache-matched-key:
    description: 'Key of the restored cache.'
  caches-matched-keys:
    description: 'Keys of restored caches.'
runs:
  using: 'node16'
  main: 'dist/restore/index.js'
  post: 'dist/save/index.js'
  post-if: success()
branding:
  icon: 'archive'
  color: 'gray-dark'
